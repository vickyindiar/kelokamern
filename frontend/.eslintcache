[{"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\index.js":"1","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\App.js":"2","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\serviceWorker.js":"4","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\store.js":"5","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\actions\\authAction.js":"6","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\routes\\rauth.js":"7","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\reducers\\authReducer.js":"8","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\reducers\\tableReducer.js":"9","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\reducers\\dataReducer.js":"10","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\nav\\PrivateRoute.js":"11","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\admin\\AdminLayout.js":"12","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\_lib\\_spinner\\Spinner.js":"13","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\config.js":"14","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\types\\authType.js":"15","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\types\\tableType.js":"16","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\types\\dataType.js":"17","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\helper\\setAuthToken.js":"18","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\helper\\isEmpty.js":"19","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\routes\\rpage.js":"20","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\auth\\Auth.js":"21","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\admin\\Nav.js":"22","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\auth\\StyledC.js":"23","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\Data.js":"24","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\home\\Home.js":"25","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\sales\\Sales.js":"26","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\return\\Return.js":"27","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\report\\Report.js":"28","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\purchase\\Purchase.js":"29","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\setting\\Setting.js":"30","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\GridCustomer.js":"31","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\GridProduct.js":"32","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\ToolsAction.js":"33","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\GridSupplier.js":"34","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\GridBrand.js":"35","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\GridCategory.js":"36","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\GridQty.js":"37","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\template\\Header.js":"38","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\actions\\dataAction.js":"39","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\ConfigGrids.js":"40","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\actions\\tableAction.js":"41"},{"size":668,"mtime":1592555064567,"results":"42","hashOfConfig":"43"},{"size":2210,"mtime":1613377998036,"results":"44","hashOfConfig":"43"},{"size":362,"mtime":499162500000,"results":"45","hashOfConfig":"43"},{"size":5086,"mtime":1565835978478,"results":"46","hashOfConfig":"43"},{"size":570,"mtime":1592554978304,"results":"47","hashOfConfig":"43"},{"size":5652,"mtime":1613358366402,"results":"48","hashOfConfig":"43"},{"size":242,"mtime":1592893609449,"results":"49","hashOfConfig":"43"},{"size":1287,"mtime":1592902393690,"results":"50","hashOfConfig":"43"},{"size":4521,"mtime":1596441818641,"results":"51","hashOfConfig":"43"},{"size":3782,"mtime":1596440492092,"results":"52","hashOfConfig":"43"},{"size":552,"mtime":1612949802294,"results":"53","hashOfConfig":"43"},{"size":1229,"mtime":1592901035263,"results":"54","hashOfConfig":"43"},{"size":808,"mtime":1565835978464,"results":"55","hashOfConfig":"43"},{"size":3394,"mtime":1612752765310,"results":"56","hashOfConfig":"43"},{"size":216,"mtime":1592902335112,"results":"57","hashOfConfig":"43"},{"size":430,"mtime":1573098875953,"results":"58","hashOfConfig":"43"},{"size":1060,"mtime":1596426584749,"results":"59","hashOfConfig":"43"},{"size":259,"mtime":1565835978481,"results":"60","hashOfConfig":"43"},{"size":278,"mtime":1565835978480,"results":"61","hashOfConfig":"43"},{"size":1319,"mtime":1612948997890,"results":"62","hashOfConfig":"43"},{"size":3796,"mtime":1613359717941,"results":"63","hashOfConfig":"43"},{"size":17182,"mtime":1613359969478,"results":"64","hashOfConfig":"43"},{"size":3967,"mtime":1592538210841,"results":"65","hashOfConfig":"43"},{"size":3013,"mtime":1613382451726,"results":"66","hashOfConfig":"43"},{"size":456,"mtime":1596076878422,"results":"67","hashOfConfig":"43"},{"size":286,"mtime":1565835978474,"results":"68","hashOfConfig":"43"},{"size":290,"mtime":1565835978473,"results":"69","hashOfConfig":"43"},{"size":291,"mtime":1565835978472,"results":"70","hashOfConfig":"43"},{"size":298,"mtime":1565835978471,"results":"71","hashOfConfig":"43"},{"size":294,"mtime":1565835978475,"results":"72","hashOfConfig":"43"},{"size":5209,"mtime":1613381575589,"results":"73","hashOfConfig":"43"},{"size":8768,"mtime":1613616741432,"results":"74","hashOfConfig":"43"},{"size":692,"mtime":1596430890553,"results":"75","hashOfConfig":"43"},{"size":5103,"mtime":1613382379783,"results":"76","hashOfConfig":"43"},{"size":3758,"mtime":1613380996602,"results":"77","hashOfConfig":"43"},{"size":3935,"mtime":1613381845774,"results":"78","hashOfConfig":"43"},{"size":3851,"mtime":1613381740713,"results":"79","hashOfConfig":"43"},{"size":304,"mtime":1565835978476,"results":"80","hashOfConfig":"43"},{"size":13702,"mtime":1613980187900,"results":"81","hashOfConfig":"43"},{"size":6114,"mtime":1614853600153,"results":"82","hashOfConfig":"43"},{"size":1199,"mtime":1573098875951,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"lcs6q0",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"86"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"86"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"86"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"86"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"86"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"86"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"86"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"86"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\index.js",[],["180","181"],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\App.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\serviceWorker.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\store.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\actions\\authAction.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\routes\\rauth.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\reducers\\authReducer.js",["182"],"import { SET_AUTH, ERR_AUTH, TOOGLE_LOADING, STOP_SPNNER, SET_FIRST_LOAD } from '../types/authType';\r\nimport isEmpty from '../helper/isEmpty';\r\n\r\nconst initialState = {\r\n    isAuthenticated : false,\r\n    errAuthMessage:'',\r\n    loading: false,\r\n    firstLoad: true,\r\n    spinner: true,\r\n    user: ''\r\n};\r\nexport default function(state = initialState, action){\r\n    switch (action.type) {\r\n        case SET_AUTH:\r\n            return {\r\n                ...state,\r\n                isAuthenticated : !isEmpty(action.payload.user),\r\n                user: { ...action.payload.user },\r\n                spinner: false,\r\n            }\r\n        case ERR_AUTH:\r\n            return {\r\n                ...state, \r\n                isAuthenticated: false,\r\n                errAuthMessage: action.payload,\r\n                spinner: false\r\n            }\r\n        case SET_FIRST_LOAD:\r\n            return{\r\n                ...state,\r\n                firstLoad: action.payload\r\n            }\r\n        case TOOGLE_LOADING: \r\n            return{\r\n                ...state,\r\n                loading: action.payload\r\n            }\r\n        case STOP_SPNNER:\r\n            return {\r\n                ...state,\r\n                spinner: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\reducers\\tableReducer.js",["183"],"import { \r\n          TOOGLE_LOADING, LOAD_DATA, SELECT_ALL, \r\n          CHANGE_SORT, CHANGE_PAGE, CHANGE_ROW_PAGE, \r\n          CHANGE_FILTER, ROW_CLICK, RESELECT, UPDATE_FORM } from '../types/tableType';\r\n\r\nconst initialState = {\r\n    title: '',\r\n    originDataSource: [],\r\n    dataSource: [],\r\n    columns: [],\r\n    order: \"asc\",\r\n    orderBy: \"\",\r\n    selected: [],\r\n    selectedAll: false,\r\n    page: 0,\r\n    rowsPerPage: 10,\r\n    valueSearch:'',\r\n    selectTable: false,\r\n    showFilter: true,\r\n    isLoading: false,\r\n    cDataStore: {}\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n      case LOAD_DATA:\r\n        return {\r\n          ...state, \r\n          columns: {...action.payload.columns },\r\n          originDataSource: {...action.payload.data },\r\n          dataSource: {...action.payload.data },\r\n          selected: []\r\n        }\r\n      case SELECT_ALL:\r\n          if (action.checked) {\r\n              return {\r\n                ...state,\r\n                selected: Object.values(state.dataSource).map(n => n.id),\r\n                selectedAll: !state.selectedAll\r\n              }\r\n          }\r\n          else{\r\n            return {\r\n              ...state,\r\n              selected: [],\r\n              selectedAll: false\r\n            }\r\n        }\r\n      case CHANGE_SORT: \r\n        const orderBy = action.payload;\r\n        let order = \"desc\";\r\n        if (state.orderBy === orderBy && state.order === order) {\r\n          order = \"asc\";\r\n        }\r\n        return{\r\n          ...state,\r\n          order,\r\n          orderBy\r\n        }\r\n      case CHANGE_PAGE: \r\n        return{\r\n          ...state,\r\n          page : action.payload\r\n        }\r\n      case CHANGE_ROW_PAGE:\r\n          return {\r\n            ...state,\r\n            rowsPerPage: action.payload\r\n        }\r\n      case CHANGE_FILTER:\r\n          let filtered = [];\r\n          let cols = [];\r\n\r\n          for(var prop in state.columns){ \r\n            cols.push(state.columns[prop].field);\r\n          }\r\n          if ( Object.values(state.originDataSource).length > 0) {\r\n            filtered = Object.values(state.originDataSource).filter(e => {\r\n              return Object.keys(e).some(s => {\r\n                if (cols.includes(s)) {\r\n                  if(e[s] === undefined || e[s] === null){  return false;  }\r\n                  else if(typeof(e[s]) === 'object'){return e[s].name.toString().toUpperCase().includes(action.payload.toString().toUpperCase()); }\r\n                  else{ return e[s].toString().toUpperCase().includes(action.payload.toString().toUpperCase()); }\r\n                } else {\r\n                  return false;\r\n                }\r\n              });\r\n            });\r\n          } else {\r\n            filtered = [];\r\n          }\r\n\r\n        if(state.selectedAll){\r\n            return{\r\n              ...state,\r\n              valueSearch: action.payload,\r\n              dataSource: filtered,\r\n              selected: Object.values(filtered).map(n => n.id)\r\n            } \r\n          }\r\n        else{\r\n            return{\r\n              ...state,\r\n              valueSearch: action.payload,\r\n              dataSource: filtered\r\n            }\r\n        }\r\n      case ROW_CLICK:\r\n          const sIndex = state.selected.indexOf(action.payload);\r\n          let newSelected = [];\r\n          if (sIndex === -1) newSelected = newSelected.concat(state.selected, action.payload);\r\n          else if (sIndex === 0) newSelected = newSelected.concat(state.selected.slice(1));\r\n          else if (sIndex === state.selected.length - 1) newSelected = newSelected.concat(state.selected.slice(0, -1));\r\n          else if (sIndex > 0) {\r\n            newSelected = newSelected.concat( state.selected.slice(0, sIndex), state.selected.slice(sIndex + 1) );\r\n          }\r\n        return {\r\n            ...state,\r\n            selected: [...newSelected] \r\n        }\r\n      case RESELECT:\r\n        return {\r\n            ...state,\r\n            selected: [...action.checked] \r\n        }\r\n      case UPDATE_FORM:\r\n        if(action.payload){\r\n          let data = {[action.payload.pgInput] : {...action.payload}}\r\n          return{\r\n            ...state,\r\n            cDataStore: {...state.cDataStore, ...data}\r\n          }\r\n        }\r\n        else{\r\n          return {\r\n            ...state,\r\n            cDataStore: {}\r\n          }\r\n        }\r\n    \r\n      case TOOGLE_LOADING: \r\n        return{\r\n            ...state,\r\n            isLoading: action.payload\r\n        }\r\n      default:\r\n        return state;\r\n    }\r\n  }","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\reducers\\dataReducer.js",["184"],"import {  CHANGE_TAB,\r\n          OPEN_MODAL, \r\n          \r\n          GET_PRODUCT,\r\n          GET_SUPPLIER,\r\n          GET_CUSTOMER,\r\n          GET_BRAND,\r\n          GET_CATEGORY,\r\n          GET_QTYTYPE,\r\n          GET_COLOR,\r\n\r\n          STORE_PRODUCT,\r\n          STORE_SUPPLIER,\r\n          STORE_CUSTOMER,\r\n          STORE_BRAND,\r\n          STORE_CATEGORY,\r\n          STORE_QTYTYPE,\r\n          STORE_COLOR,\r\n          TOOGLE_LOADING } from \"../types/dataType\";\r\n\r\nconst initialState = {\r\n    tabActive: -1,\r\n    columns: [],\r\n    dataProduct : [],\r\n    dataSupplier: [],\r\n    dataCustomer: [],\r\n    dataBrand: [],\r\n    dataCategory: [],\r\n    dataQtytype: [],\r\n    dataColor: [],\r\n    isLoading: false,\r\n\r\n    openModal: false,\r\n };\r\n  export default function(state = initialState, action) {\r\n    switch (action.type) {\r\n      case CHANGE_TAB:\r\n        return {\r\n          ...state,\r\n          tabActive: action.payload.tabActive,\r\n        }\r\n      case OPEN_MODAL:\r\n        return {\r\n          ...state,\r\n          openModal: action.payload\r\n        }\r\n      case GET_PRODUCT:\r\n        return{\r\n          ...state,\r\n          columns: [...action.payload.columns ],\r\n          dataProduct: [...action.payload.dataSource ],\r\n        }\r\n      case GET_SUPPLIER:\r\n        return {\r\n          ...state,\r\n          columns: [...action.payload.columns ],\r\n          dataSupplier: [...action.payload.dataSource ],\r\n        }\r\n      case GET_CUSTOMER:\r\n        return {\r\n          ...state,\r\n          columns: [...action.payload.columns ],\r\n          dataCustomer: [...action.payload.dataSource ],\r\n        }\r\n      case GET_BRAND:\r\n        return {\r\n          ...state,\r\n          columns: [...action.payload.columns ],\r\n          dataBrand: [...action.payload.dataSource ],\r\n        }\r\n      case GET_CATEGORY: \r\n        return {\r\n          ...state,\r\n          columns: [...action.payload.columns ],\r\n          dataCategory: [...action.payload.dataSource ],\r\n        }\r\n      case GET_QTYTYPE:\r\n          return {\r\n            ...state,\r\n            columns: [...action.payload.columns ],\r\n            dataQtytype: [...action.payload.dataSource ],\r\n          }\r\n      case GET_COLOR:\r\n        return {\r\n          ...state,\r\n          columns: [...action.payload.columns ],\r\n          dataColor: [...action.payload.dataSource ],\r\n        }\r\n      \r\n\r\n      case STORE_PRODUCT:\r\n        return{\r\n          ...state,\r\n          dataProduct: Object.assign(state.dataProduct, action.payload)\r\n        }\r\n      case STORE_SUPPLIER:\r\n        return {\r\n          ...state,\r\n          columns: [...action.payload.columns ],\r\n          dataSupplier: [...action.payload.dataSource ],\r\n        }\r\n      case STORE_CUSTOMER:\r\n        return {\r\n          ...state,\r\n          columns: [...action.payload.columns ],\r\n          dataCustomer: [...action.payload.dataSource ],\r\n        }\r\n      case STORE_BRAND:\r\n        return {\r\n          ...state,\r\n          columns: [...action.payload.columns ],\r\n          dataBrand: [...action.payload.dataSource ],\r\n        }\r\n      case STORE_CATEGORY: \r\n        return {\r\n          ...state,\r\n          columns: [...action.payload.columns ],\r\n          dataCategory: [...action.payload.dataSource ],\r\n        }\r\n      case STORE_QTYTYPE:\r\n          return {\r\n            ...state,\r\n            columns: [...action.payload.columns ],\r\n            dataQtytype: [...action.payload.dataSource ],\r\n          }\r\n      case STORE_COLOR:\r\n        return {\r\n          ...state,\r\n          columns: [...action.payload.columns ],\r\n          dataColor: [...action.payload.dataSource ],\r\n        }\r\n\r\n      case TOOGLE_LOADING: \r\n        return{\r\n            ...state,\r\n            isLoading: action.payload\r\n        }\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  ","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\nav\\PrivateRoute.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\admin\\AdminLayout.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\_lib\\_spinner\\Spinner.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\config.js",["185"],"\r\nconst isLocalhost = Boolean(\r\n     window.location.hostname === 'localhost' ||\r\n     window.location.hostname.includes('testapp') ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n);\r\n\r\nexport default {\r\n    defaultPath: '/dashboard',\r\n    basename: 'react/default', // only at build time to set, like \r\n    layout: 'vertical', // vertical, horizontal (not available in lite version)\r\n    preLayout: null, // (not available in lite version)\r\n    collapseMenu: false, // mini-menu\r\n    layoutType: 'default', // menu-dark, (menu-light, dark are not available in lite version)\r\n    navIconColor: false,\r\n    headerBackColor: 'header-default', // header-default, (header-blue, header-red, header-purple, header-lightblue, header-dark are not available in lite version)\r\n    navBackColor: 'navbar-default', // navbar-default, (navbar-blue, navbar-red, navbar-purple, navbar-lightblue, navbar-dark are not available in lite version)\r\n    navBrandColor: 'brand-default', // brand-default, (brand-blue, brand-red, brand-purple, brand-lightblue, brand-dark are not available in lite version)\r\n    navBackImage: false, // not available in lite version\r\n    rtlLayout: false, // not available in lite version\r\n    navFixedLayout: true,\r\n    headerFixedLayout: false, // not available in lite version\r\n    boxLayout: false,\r\n    navDropdownIcon: 'style1', // style1, (style2, style3 are not available in lite version)\r\n    navListIcon: 'style1', // style1, (style2, style3, style4, style5, style6 are not available in lite version)\r\n    navActiveListColor: 'active-default', // active-default, (active-blue, active-red, active-purple, active-lightblue, active-dark are not available in lite version)\r\n    navListTitleColor: 'title-default', // title-default, (title-blue, title-red, title-purple, title-lightblue, title-dark are not available in lite version)\r\n    navListTitleHide: false, // not available in lite version\r\n    configBlock: false, // not available in lite version\r\n    layout6Background : 'linear-gradient(to right, #A445B2 0%, #D41872 52%, #FF0066 100%)', // used only for pre-layout = layout-6\r\n    layout6BackSize : '', // used only for pre-layout = layout-6\r\n    \r\n    \r\n    baseURL:  isLocalhost ? 'http://localhost:5000/' : 'ISAPI.dll/',\r\n    apiURL: isLocalhost ? 'http://localhost:5000/v1/': 'ISAPI.dll/api/',\r\n\r\n    month: [\r\n        { \"abbreviation\": \"Jan\", \"name\": \"January\", 'value': '0' },\r\n        { \"abbreviation\": \"Feb\", \"name\": \"February\", 'value': '1' },\r\n        { \"abbreviation\": \"Mar\", \"name\": \"March\", 'value': '2' },\r\n        { \"abbreviation\": \"Apr\", \"name\": \"April\", 'value': '3' },\r\n        { \"abbreviation\": \"May\", \"name\": \"May\", 'value': '4' },\r\n        { \"abbreviation\": \"Jun\", \"name\": \"June\", 'value': '5' },\r\n        { \"abbreviation\": \"Jul\", \"name\": \"July\", 'value': '6', },\r\n        { \"abbreviation\": \"Aug\", \"name\": \"August\", 'value': '7' },\r\n        { \"abbreviation\": \"Sep\", \"name\": \"September\", 'value': '8' },\r\n        { \"abbreviation\": \"Oct\", \"name\": \"October\", 'value': '9' },\r\n        { \"abbreviation\": \"Nov\", \"name\": \"November\", 'value': '10' },\r\n        { \"abbreviation\": \"Dec\", \"name\": \"December\", 'value': '11' }\r\n    ]\r\n\r\n};\r\n","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\types\\authType.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\types\\tableType.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\types\\dataType.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\helper\\setAuthToken.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\helper\\isEmpty.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\routes\\rpage.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\auth\\Auth.js",["186"],"import React, {useEffect, useState} from \"react\";\nimport * as C from \"./StyledC\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { TOOGLE_LOADING } from '../../services/types/authType';\nimport { login, register } from '../../services/actions/authAction';\nimport \"./styles.css\";\n\nfunction Auth() {\n  console.log('render auth')\n  const [signIn, toggle] = useState(true); \n  const dispatch = useDispatch();\n  const isAuthenticated = useSelector(s => s.auth.isAuthenticated);\n  const history = useHistory();\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('admin@admin.com');\n  const [password, setPassword] = useState('admin');\n  const [role] = useState('');\n  const [showPass, setshowPass] = useState(false);\n\n  useEffect(() => {\n    if(isAuthenticated){\n       history.push('/');\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  \n  const handleOnSubmitLogin = (e) =>{\n    e.preventDefault();\n    dispatch({type: TOOGLE_LOADING, payload: true}); \n    dispatch(login({email, password, showPass}, history));  \n  }\n\n  const handleOnSubmitRegister = (e) => {\n    e.preventDefault();\n    dispatch({type: TOOGLE_LOADING, payload: true}); \n    dispatch(register({name, email, password, role }, history));\n  }\n\n  const handleOnChange = (e) => {\n      if (e.target.name === 'name') { setName(e.target.value) }\n      else if(e.target.name === 'email') { setEmail(e.target.value) }\n      else if(e.target.name === 'password') { setPassword(e.target.value) }\n    }\n\n  const handleClickShowPassword = () => { setshowPass(!showPass) } \n\n  return (\n    <C.Container>\n      <C.SignUpContainer signingIn={signIn}>\n        <C.Form onSubmit={ handleOnSubmitRegister }>\n          <C.Title>Create Account</C.Title>\n          <C.Input type=\"text\" placeholder=\"Name\" name=\"name\" onChange={handleOnChange} value={name} />\n          <C.Input type=\"email\" placeholder=\"Email\" name=\"email\" onChange={handleOnChange} value={email} />\n          <C.Input type=\"password\" placeholder=\"Password\" name=\"password\" onChange={handleOnChange} value={password}/>\n          <input type=\"hidden\" name=\"role_id\" id=\"role_id\" value=\"2\"/>\n          <C.Button>Sign Up</C.Button>\n        </C.Form>\n      </C.SignUpContainer>\n      <C.SignInContainer signingIn={signIn}>\n        <C.Form onSubmit={ handleOnSubmitLogin }> \n          <C.Title>Sign in</C.Title>\n          <C.Input type=\"email\" placeholder=\"Email\" name=\"email\" onChange={handleOnChange} value={email} />\n          <C.Input type=\"password\" placeholder=\"Password\"  name=\"password\" onChange={handleOnChange} value={password} />\n          <C.Anchor href=\"#\">Forgot your password?</C.Anchor>\n          <C.Button type=\"submit\">Sign In</C.Button>\n        </C.Form>\n      </C.SignInContainer>\n      <C.OverlayContainer signingIn={signIn}>\n        <C.Overlay signingIn={signIn}>\n          <C.LeftOverlayPanel signingIn={signIn}>\n            <C.Title>Welcome Back!</C.Title>\n            <C.Paragraph>\n              To keep connected with us please login with your personal info\n            </C.Paragraph>\n            <C.GhostButton onClick={() => toggle(true)}>\n              Sign In\n            </C.GhostButton>\n          </C.LeftOverlayPanel>\n          <C.RightOverlayPanel signingIn={signIn}>\n            <C.Title>Hello, Friend!</C.Title>\n            <C.Paragraph>\n              Enter your personal details and start journey with us\n            </C.Paragraph>\n            <C.GhostButton onClick={() => toggle(false)}>\n              Sign Up\n            </C.GhostButton>\n          </C.RightOverlayPanel>\n        </C.Overlay>\n      </C.OverlayContainer>\n    </C.Container>\n  );\n}\n\nconst areEqual = (prevProps, nextProps) => true;\nexport default React.memo(Auth, areEqual);\n","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\admin\\Nav.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\auth\\StyledC.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\Data.js",["187","188"],"import React, {useState, useRef} from 'react';\r\nimport {useDispatch } from 'react-redux'\r\nimport ToolsAction from './ToolsAction';\r\nimport Header from '../template/Header';\r\nimport TabPanel, {Item} from 'devextreme-react/tab-panel';\r\nimport GridProduct from './GridProduct';\r\nimport GridSupplier from './GridSupplier';\r\nimport GridCustomer from './GridCustomer';\r\nimport GridBrand from './GridBrand';\r\nimport GridCategory from './GridCategory';\r\nimport GridQty from './GridQty';\r\nimport { getData } from \"../../services/actions/dataAction\";\r\nimport '../../styles/sass/component/_data.scss'\r\n\r\nfunction Data() {\r\n\r\n    const refGridProduct = useRef(null);\r\n    const refGridCustomer = useRef(null)\r\n    const refGridBrand = useRef(null)\r\n    const refGridSupplier = useRef(null)\r\n    const refGridCategory = useRef(null)\r\n    const refGridQty = useRef(null)\r\n\r\n    const [tabActive, setTabActive] = useState(0);\r\n    const dispatch = useDispatch();\r\n    \r\n    const onSelectionChanged = (args) => {\r\n        if(args.name === 'selectedIndex') {\r\n            console.log('change tab')\r\n            setTabActive(args.value);\r\n          }\r\n    }\r\n\r\n    const onInitialized = (args) =>{\r\n        dispatch(getData(tabActive));\r\n    }\r\n\r\n    const onActionClick = (e) => {\r\n        if(e.itemIndex === 0){\r\n           refGridProduct.current.instance.addRow(); \r\n        }\r\n    }\r\n\r\n    console.log('render data')\r\n    return (\r\n    <React.Fragment>\r\n        <div className=\"content-container data\">\r\n        <Header />\r\n        <div className=\"content-data\">\r\n            {/* < ToolsAction onItemClick={onActionClick} /> */}\r\n            <TabPanel\r\n                height={\"95%\"}\r\n                selectedIndex={tabActive}\r\n                onOptionChanged={onSelectionChanged}\r\n                onSelectionChanged={ onInitialized }\r\n                onInitialized={ onInitialized }\r\n                loop={false}\r\n                animationEnabled={true}\r\n                swipeEnabled={true}\r\n            > \r\n                <Item title=\"Barang\" key={0} >\r\n                    <GridProduct tab={0} vref={refGridProduct}/>\r\n                </Item>\r\n                <Item title=\"Supplier\" ke={1} >\r\n                    <GridSupplier tab={1} vref={refGridSupplier} />\r\n                </Item>\r\n                <Item title=\"Pelanggan\" ke={2} >\r\n                    <GridCustomer tab={2} vref={refGridCustomer}/>\r\n                </Item>\r\n                <Item title=\"Merk\" ke={3} >\r\n                    <GridBrand tab={3} vref={refGridBrand}/>\r\n                </Item>\r\n                <Item title=\"Kategori\" ke={4} >\r\n                    <GridCategory tab={4} vref={refGridCategory}/>\r\n                </Item>\r\n                <Item title=\"Satuan\" key={5} >\r\n                    <GridQty tab={5} vref={refGridQty}/>\r\n                </Item>\r\n            </TabPanel>\r\n        </div>\r\n \r\n        </div>\r\n    </React.Fragment>\r\n    )\r\n}\r\nconst areEqual = (prevProps, nextProps) => true;\r\nexport default React.memo(Data, areEqual);\r\n","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\home\\Home.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\sales\\Sales.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\return\\Return.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\report\\Report.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\purchase\\Purchase.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\setting\\Setting.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\GridCustomer.js",["189","190","191","192"],"import React, {useState, useRef, useEffect} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport DataGrid, {Column, Selection, Grouping, GroupPanel, ColumnFixing, SearchPanel, Scrolling, LoadPanel, Editing, Popup, Position, Form } from 'devextreme-react/data-grid';\r\n// import isEmpty from '../../services/helper/isEmpty';\r\nimport { Item } from 'devextreme-react/form';\r\nimport FileUploader from 'devextreme-react/file-uploader';\r\nimport * as gConfig from './ConfigGrids';\r\n\r\n\r\nfunction GridCustomer({tab, vref}) {\r\n    const [selectionMode, setSelectionMode] = useState('multiple');\r\n    const [expandMode, setExpandMode] = useState(true);\r\n    const customerDS = useSelector(s => s.data.dataCustomer);\r\n    const isLoad = false;\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        console.log('render useeffect data')\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n \r\n\r\n    console.log(tab,'render grid customer');\r\n    return (\r\n         <DataGrid\r\n                ref={vref}\r\n                id={'gridViewCus'}\r\n               // key={'evdno'}\r\n                dataSource= { customerDS }\r\n                onContentReady={ (e) => gConfig.onContentReady(e, isLoad) }\r\n                columnAutoWidth={true}\r\n                height= {\"100%\"}\r\n                width= {\"100%\"}\r\n                //noDataText={isLoad ? '' : 'No Data !'}\r\n                //onToolbarPreparing={ (e) => gConfig.onToolbarPreparing(e, selectionMode, setSelectionMode, expandMode, setExpandMode) }\r\n                showBorders={false}\r\n                showColumnLines= {false}\r\n                showRowLines={true}\r\n                rowAlternationEnabled={true}\r\n                //onSelectionChanged= {  gConfig.changeStateSelectionChange  }  \r\n                allowColumnResizing={true}\r\n                // onInitNewRow= { gConfig.onInitNewRow() }\r\n                // onRowUpdated = { (e) => gConfig.onRowUpdated(e,  2)(dispatch) }\r\n                // onRowUpdating = { (e) => { gConfig.onRowUpdating(e, 2); }}\r\n                // onRowInserted = { (e) => { gConfig.onRowInserted(e, 2)(dispatch) } }\r\n                // onRowInserting = {(e) => { gConfig.onRowInserting(e, 2); }}\r\n                // onRowRemoved = { (e) => { gConfig.onRowRemoved(e, 2)(dispatch) }}\r\n            > \r\n            <Editing refreshMode={'reshape'} mode=\"popup\" allowAdding={true} allowUpdating={true} allowDeleting={true} >\r\n                <Popup title=\"Barang\" showTitle={true} width={700} height={600}>\r\n                    <Position my=\"top\" at=\"top\" of={window} />\r\n                </Popup>\r\n                <Form>\r\n                    <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                        <Item dataField=\"number\"  editorOptions={{ disabled: true  }} />\r\n                        <Item dataField=\"name\" />\r\n                        <Item dataField=\"address\" />\r\n                        <Item dataField=\"city\" />\r\n                        <Item dataField=\"province\" />\r\n                        <Item dataField=\"phone\" />\r\n                        <Item dataField=\"phone2\" />\r\n                        <Item dataField=\"store\" />\r\n                        <Item dataField=\"desc\" editorType=\"dxTextArea\" colSpan={2} editorOptions={{ height: 100 }} />\r\n                        <Item itemType=\"group\" caption=\"Gambar\" colCount={2} colSpan={2}> \r\n                         <FileUploader selectButtonText=\"Select photo\" labelText=\"\" accept=\"image/*\" uploadMode=\"useForm\" />\r\n                        </Item>\r\n                    </Item>  \r\n                </Form>\r\n            </Editing>\r\n\r\n            <Scrolling mode={\"virtual\"} />\r\n            <LoadPanel enabled={true}  showPane={true} />\r\n            <GroupPanel visible={true} />\r\n            <Grouping autoExpandAll={expandMode} />\r\n            <SearchPanel visible={true} highlightCaseSensitive={true} />\r\n            <Selection mode={selectionMode} selectAllMode={'allPages'} showCheckBoxesMode={'always'} allowSelectAll={true} />\r\n            <ColumnFixing enabled={true} />\r\n            {/* { gConfig.generateColumns(tab) } */}\r\n            <Column dataField=\"number\" caption=\"NO.\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"name\" caption=\"NAMA\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"address\" caption=\"ALAMAT\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"city\" caption=\"KOTA\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"province\" caption=\"PROVINSI\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"phone\" caption=\"TLP\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"phone2\" caption=\"TLP2\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"store\" caption=\"TOKO\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"desc\" caption=\"DESK\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            \r\n    </DataGrid>  \r\n    )\r\n}\r\nconst areEqual = (prevProps, nextProps) => true;\r\nexport default React.memo(GridCustomer, areEqual)\r\n","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\GridProduct.js",["193","194","195","196","197","198","199"],"import React, {useState, useRef, useEffect} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport DataGrid, { Column, FormItem, Selection, Grouping, GroupPanel, ColumnFixing, SearchPanel, Scrolling, LoadPanel, Editing, Popup, Position, Form, Lookup } from 'devextreme-react/data-grid';\r\nimport FileUploader from 'devextreme-react/file-uploader';\r\nimport { Item } from 'devextreme-react/form';\r\nimport * as gConfig from './ConfigGrids';\r\nimport isEmpty from '../../services/helper/isEmpty';\r\nimport { getProductSupport } from \"../../services/actions/dataAction\";\r\n\r\nfunction GridTable({tab, vref}) {\r\n    const [selectionMode, setSelectionMode] = useState('single');\r\n    const [expandMode, setExpandMode] = useState(true);\r\n    const productDS = useSelector(s => s.data.dataProduct);\r\n    const [brandDS, setBrandDS] = useState(null);\r\n    const [categoryDS, setCategoryDS] = useState(null);\r\n    const [qtyDS, setQtyDS]= useState(null);\r\n    const [supplierDS, setSupplierDS] = useState(null);\r\n    const isLoad =  false; // useSelector(s => s.data.isLoading);\r\n    const dispatch = useDispatch();\r\n\r\n    const refImageUploader = useRef(null);\r\n\r\n    useEffect(() => {\r\n        console.log('render useeffect data');\r\n        getProductSupport().then((res) => {\r\n            if(res){\r\n                setBrandDS(res.brand.data);\r\n                setCategoryDS(res.category.data);\r\n                setQtyDS(res.qtytype.data);\r\n                setSupplierDS(res.supplier.data);\r\n            }\r\n        })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    const onEditingStart = (e) => {\r\n        e.data.brand = e.data.brand_id;\r\n        e.data.category = e.data.category_id;\r\n        e.data.supplier = e.data.supplier_id;\r\n        e.data.qtytype = e.data.qtytype_id;\r\n    }\r\n\r\n    return (\r\n         <DataGrid\r\n                ref={vref}\r\n                id={'gridViewPd'}\r\n                //key={'evdno'}\r\n                dataSource= { productDS }\r\n                //onContentReady={ (e) => gConfig.onContentReady(e, isLoad) }\r\n                columnAutoWidth={true}\r\n                height= {\"100%\"}\r\n                width= {\"100%\"}\r\n                noDataText={'No Data !'}\r\n                onToolbarPreparing={ (e) => gConfig.onToolbarPreparing(e, selectionMode, setSelectionMode, expandMode, setExpandMode) }\r\n                showBorders={false}\r\n                showColumnLines= {false}\r\n                showRowLines={true}\r\n                rowAlternationEnabled={true}\r\n                allowColumnResizing={true}\r\n                onSelectionChanged= {  (e) => gConfig.changeStateSelectionChange(e)  }  \r\n                onInitNewRow= {  (e) => gConfig.onInitNewRow(e) }\r\n                \r\n                onRowInserting = {(e) => { gConfig.onRowInserting(e); }}\r\n                onRowInserted = { (e) => {\r\n                    let uploadedImg = refImageUploader.current.instance.option('value')[0];\r\n                     gConfig.onRowInserted(e, 0, uploadedImg)(dispatch) \r\n                    }\r\n                 }\r\n                \r\n                // onEditingStart = { onEditingStart }\r\n                // onRowUpdated = { (e) => gConfig.onRowUpdated(e,  0)(dispatch) }\r\n                // onRowUpdating = { (e) => { gConfig.onRowUpdating(e, 0, brandDS, categoryDS, supplierDS, qtyDS); }}\r\n             \r\n                onRowRemoving = { (e) => { gConfig.onRowRemoved(e, 0)(dispatch) }}\r\n                 \r\n            > \r\n            {/* <Editing refreshMode={'reshape'} mode=\"popup\" allowAdding={true} allowUpdating={true} allowDeleting={true} >\r\n                <Popup title=\"Product\" showTitle={true} width={700} height={600}>\r\n                    <Position my=\"top\" at=\"top\" of={window} />\r\n                </Popup>\r\n     \r\n            </Editing> */}\r\n\r\n            {/* <Scrolling mode={\"virtual\"} /> */}\r\n            {/* <LoadPanel enabled={false}  showPane={false} /> */}\r\n            <Editing mode=\"form\" allowUpdating={true} allowAdding={true} allowDeleting={true} >\r\n                <Form>\r\n                    <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                        <Item dataField=\"number\"  editorOptions={{ disabled: true  }} />\r\n                        <Item dataField=\"name\" />\r\n                        <Item dataField=\"brand\"  editorType=\"dxLookup\" editorOptions={{  dataSource: brandDS,  valueExpr:'_id', displayExpr:'name', searchEnabled: true, value: '' }} />\r\n                        <Item dataField=\"category\"  editorType=\"dxLookup\" editorOptions={{ dataSource: categoryDS,  valueExpr:'_id', displayExpr:'name', searchEnabled: true, value: '' }} />\r\n                        <Item dataField=\"bprice\" editorType=\"dxNumberBox\" editorOptions={{ format: \"Rp #,##0.##\" }} />\r\n                        <Item dataField=\"sprice\" editorType=\"dxNumberBox\" editorOptions={{ format: \"Rp #,##0.##\" }}/>\r\n                        <Item dataField=\"stock\"  editorType=\"dxNumberBox\"/>\r\n                        <Item dataField=\"qtytype\"  editorType=\"dxLookup\" editorOptions={{  dataSource: qtyDS,  valueExpr:'_id', displayExpr:'name', searchEnabled: true, value: '' }} />\r\n                        <Item dataField=\"color\" />\r\n                        <Item dataField=\"supplier\"  editorType=\"dxLookup\" editorOptions={{  dataSource: supplierDS,  valueExpr:'_id', displayExpr:'name', searchEnabled: true, value: '' }} />\r\n                     \r\n                        <Item dataField=\"desc\" />\r\n                        <Item itemType=\"group\" caption=\"Gambar\" colCount={2} colSpan={2}> \r\n                            <FileUploader ref={refImageUploader} \r\n                                selectButtonText=\"Select photo\" \r\n                                labelText=\"\" accept=\"image/*\" \r\n                                uploadMode=\"useButtons\" \r\n                                maxFileSize={600000} \r\n                                allowedFileExtensions={['.jpg', '.jpeg', '.gif', '.png']} \r\n                            />\r\n                        </Item>\r\n                    </Item>  \r\n                </Form>\r\n            </Editing>\r\n            <GroupPanel visible={true} />\r\n            <Grouping autoExpandAll={expandMode} />\r\n            <SearchPanel visible={true} highlightCaseSensitive={true} />\r\n            <Selection mode={selectionMode} selectAllMode={'allPages'} showCheckBoxesMode={'always'} allowSelectAll={true} />\r\n            <ColumnFixing enabled={true} />          \r\n            {/* { gConfig.generateColumns(tab, configColumn() ) }  */}\r\n            <Column dataField=\"number\" caption=\"NO.\" visible={true} allowEditing={false}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"name\" caption=\"NAMA\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"brand\" caption=\"MERK\" visible={true}  cssClass=\"row-vertical-align\" >\r\n                <Lookup dataSource={brandDS} valueExpr=\"_id\" displayExpr=\"name\" />\r\n            </Column>\r\n            <Column dataField=\"sprice\" caption=\"JUAL\" dataType=\"number\" format={{type:\"fixedPoint\", precision:2}} cssClass=\"row-vertical-align\" /> \r\n            <Column dataField=\"bprice\" caption=\"BELI\" dataType=\"number\" format={{type:\"fixedPoint\", precision:2}}  cssClass=\"row-vertical-align\" />    \r\n            <Column dataField=\"stock\" caption=\"STOCK\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"qtytype\" caption=\"SATUAN\" visible={true}  cssClass=\"row-vertical-align\" >\r\n                 <Lookup dataSource={qtyDS} valueExpr=\"_id\" displayExpr=\"name\" />\r\n            </Column>\r\n            <Column dataField=\"category\" caption=\"KATEGORI\" visible={true}  cssClass=\"row-vertical-align\" >\r\n                 <Lookup dataSource={categoryDS} valueExpr=\"_id\" displayExpr=\"name\" />\r\n            </Column>\r\n            <Column dataField=\"color\" caption=\"WARNA\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"supplier\" caption=\"PENYEDIA\" visible={true} cssClass=\"row-vertical-align\" >\r\n                 <Lookup dataSource={supplierDS} valueExpr=\"_id\" displayExpr=\"name\" />\r\n            </Column>\r\n            {/* <Column dataField=\"duedate\" caption=\"DUE DATE\" visible={true} dataType=\"date\" format=\"dd/MM/yyyy\" width={120} cssClass=\"row-vertical-align\" /> */}\r\n            <Column dataField=\"image\" caption=\"GAMBAR\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"desc\" caption=\"DESK. \" visible={true}  cssClass=\"row-vertical-align\" >\r\n                  <FormItem colSpan={2} editorType=\"dxTextArea\" editorOptions={{'height':'100'}} />\r\n            </Column>\r\n            \r\n    </DataGrid>  \r\n    )\r\n}\r\nconst areEqual = (prevProps, nextProps) => true;\r\nexport default React.memo(GridTable, areEqual)\r\n","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\ToolsAction.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\GridSupplier.js",["200","201","202","203","204","205"],"import React, {useState, useRef, useEffect} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport DataGrid, {Column, Selection, Grouping, GroupPanel, ColumnFixing, SearchPanel, Scrolling, LoadPanel, Editing, Popup, Position, Form } from 'devextreme-react/data-grid';\r\n// import isEmpty from '../../services/helper/isEmpty';\r\nimport { Item } from 'devextreme-react/form';\r\nimport FileUploader from 'devextreme-react/file-uploader';\r\nimport * as gConfig from './ConfigGrids';\r\n\r\n\r\nfunction GridSupplier({tab, vref}) {\r\n    const [selectionMode, setSelectionMode] = useState('multiple');\r\n    const [expandMode, setExpandMode] = useState(true);\r\n    const supplierDS = useSelector(s => s.data.dataSupplier);\r\n    const isLoad = false;\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        console.log('render useeffect data')\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    console.log(tab,'render grid supplier');\r\n    return (\r\n        <DataGrid\r\n            ref={vref}\r\n            id={'gridViewSupp'}\r\n            // key={'evdno'}\r\n            dataSource= { supplierDS}\r\n            //onContentReady={ (e) => gConfig.onContentReady(e, isLoad) }\r\n            columnAutoWidth={true}\r\n            height= {\"100%\"}\r\n            width= {\"100%\"}\r\n            //noDataText={isLoad ? '' : 'No Data !'}\r\n            //onToolbarPreparing={ (e) => gConfig.onToolbarPreparing(e, selectionMode, setSelectionMode, expandMode, setExpandMode) }\r\n            showBorders={false}\r\n            showColumnLines= {false}\r\n            showRowLines={true}\r\n            rowAlternationEnabled={true}\r\n            //onSelectionChanged= {  gConfig.changeStateSelectionChange  }  \r\n            allowColumnResizing={true}\r\n            // onInitNewRow= { gConfig.onInitNewRow() }\r\n            // onRowUpdated = { (e) => gConfig.onRowUpdated(e, 1)(dispatch) }\r\n            // onRowUpdating = { (e) => { gConfig.onRowUpdating(e, 1); }}\r\n            // onRowInserted = { (e) => { gConfig.onRowInserted(e, 1)(dispatch) } }\r\n            // onRowInserting = {(e) => { gConfig.onRowInserting(e, 1); }}\r\n            // onRowRemoved = { (e) => { gConfig.onRowRemoved(e, 1)(dispatch) }}\r\n        > \r\n            <Editing refreshMode={'reshape'} mode=\"popup\" allowAdding={true} allowUpdating={true} allowDeleting={true} >\r\n                <Popup title=\"Barang\" showTitle={true} width={700} height={600}>\r\n                    <Position my=\"top\" at=\"top\" of={window} />\r\n                </Popup>\r\n                <Form>\r\n                    <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                        <Item dataField=\"number\"  editorOptions={{ disabled: true  }} />\r\n                        <Item dataField=\"name\" />\r\n                        <Item dataField=\"address\" />\r\n                        <Item dataField=\"city\" />\r\n                        <Item dataField=\"province\" />\r\n                        <Item dataField=\"phone\" />\r\n                        <Item dataField=\"phone2\" />\r\n                        <Item dataField=\"store\" />\r\n                        <Item dataField=\"desc\" editorType=\"dxTextArea\" colSpan={2} editorOptions={{ height: 100 }} />\r\n                        <Item itemType=\"group\" caption=\"Gambar\" colCount={2} colSpan={2}> \r\n                         <FileUploader selectButtonText=\"Select photo\" labelText=\"\" accept=\"image/*\" uploadMode=\"useForm\" />\r\n                        </Item>\r\n                    </Item>  \r\n                </Form>\r\n            </Editing>\r\n\r\n            <Scrolling mode={\"virtual\"} />\r\n            <LoadPanel enabled={true}  showPane={true} />\r\n            <GroupPanel visible={true} />\r\n            <Grouping autoExpandAll={expandMode} />\r\n            <SearchPanel visible={true} highlightCaseSensitive={true} />\r\n            <Selection mode={selectionMode} selectAllMode={'allPages'} showCheckBoxesMode={'always'} allowSelectAll={true} />\r\n            <ColumnFixing enabled={true} />\r\n            {/* { gConfig.generateColumns(tab) } */}\r\n            <Column dataField=\"number\" caption=\"NO.\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"name\" caption=\"NAMA\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"address\" caption=\"ALAMAT\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"city\" caption=\"KOTA\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"province\" caption=\"PROVINSI\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"phone\" caption=\"TLP\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"phone2\" caption=\"TLP2\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"store\" caption=\"TOKO\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"desc\" caption=\"DESK\" visible={true}  cssClass=\"row-vertical-align\" />\r\n        </DataGrid>  \r\n    )\r\n}\r\nconst areEqual = (prevProps, nextProps) => true;\r\nexport default React.memo(GridSupplier, areEqual)\r\n","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\GridBrand.js",["206","207","208"],"import React, {useState, useRef, useEffect} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport DataGrid, {Column, Selection, Grouping, GroupPanel, ColumnFixing, SearchPanel, Scrolling, LoadPanel, Editing, Popup, Position, Form } from 'devextreme-react/data-grid';\r\n// import isEmpty from '../../services/helper/isEmpty';\r\nimport { Item } from 'devextreme-react/form';\r\nimport * as gConfig from './ConfigGrids';\r\n\r\n\r\nfunction GridBrand({tab, vref}) {\r\n    const [selectionMode, setSelectionMode] = useState('multiple');\r\n    const [expandMode, setExpandMode] = useState(true);\r\n    const brandDS = useSelector(s => s.data.dataBrand);\r\n    const isLoad = false;\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        console.log('render useeffect data')\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    console.log(tab,'render grid brand');\r\n    return (\r\n         <DataGrid\r\n                ref={vref}\r\n                id={'gridViewBrd'}\r\n               // key={'evdno'}\r\n                dataSource= { brandDS }\r\n                //onContentReady={ (e) => gConfig.onContentReady(e, isLoad) }\r\n                columnAutoWidth={true}\r\n                height= {\"100%\"}\r\n                width= {\"100%\"}\r\n                //noDataText={isLoad ? '' : 'No Data !'}\r\n                onToolbarPreparing={ (e) => gConfig.onToolbarPreparing(e, selectionMode, setSelectionMode, expandMode, setExpandMode) }\r\n                showBorders={false}\r\n                showColumnLines= {false}\r\n                showRowLines={true}\r\n                rowAlternationEnabled={true}\r\n               // onSelectionChanged= {  gConfig.changeStateSelectionChange  }  \r\n                allowColumnResizing={true}\r\n                // onInitNewRow= { gConfig.onInitNewRow() }\r\n                // onRowUpdated = { (e) => gConfig.onRowUpdated(e,  3)(dispatch) }\r\n                // onRowInserted = { (e) => { gConfig.onRowInserted(e, 3)(dispatch) } }\r\n                // onRowRemoved = { (e) => { gConfig.onRowRemoved(e, 3)(dispatch) }}\r\n            > \r\n             <Editing refreshMode={'reshape'} mode=\"popup\" allowAdding={true} allowUpdating={true} allowDeleting={true} >\r\n                <Popup title=\"Barang\" showTitle={true} width={700} height={600}>\r\n                    <Position my=\"top\" at=\"top\" of={window} />\r\n                </Popup>\r\n                <Form>\r\n                    <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                        <Item dataField=\"number\"  editorOptions={{ disabled: true  }} />\r\n                        <Item dataField=\"name\" />\r\n                        <Item dataField=\"desc\" editorType=\"dxTextArea\" colSpan={2} editorOptions={{ height: 100 }} />\r\n                    </Item>  \r\n                </Form>\r\n            </Editing>\r\n\r\n            <Scrolling mode={\"virtual\"} />\r\n            <LoadPanel enabled={true}  showPane={true} />\r\n            <GroupPanel visible={true} />\r\n            <Grouping autoExpandAll={expandMode} />\r\n            <SearchPanel visible={true} highlightCaseSensitive={true} />\r\n            <Selection mode={selectionMode} selectAllMode={'allPages'} showCheckBoxesMode={'always'} allowSelectAll={true} />\r\n            <ColumnFixing enabled={true} />\r\n            {/* { gConfig.generateColumns(tab) } */}\r\n            <Column dataField=\"number\" caption=\"NO.\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"name\" caption=\"NAMA\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"desc\" caption=\"DESK\" visible={true}  cssClass=\"row-vertical-align\" />\r\n    </DataGrid>  \r\n    )\r\n}\r\nconst areEqual = (prevProps, nextProps) => true;\r\nexport default React.memo(GridBrand, areEqual)\r\n","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\GridCategory.js",["209","210","211","212","213"],"import React, {useState, useEffect} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport DataGrid, { Column, Selection, Grouping, GroupPanel, ColumnFixing, SearchPanel, Scrolling, LoadPanel, Editing, Popup, Position, Form } from 'devextreme-react/data-grid';\r\n// import isEmpty from '../../services/helper/isEmpty';\r\nimport { Item } from 'devextreme-react/form';\r\nimport * as gConfig from './ConfigGrids';\r\n\r\nfunction GridCategory({tab, vref}) {\r\n    const [selectionMode, setSelectionMode] = useState('multiple');\r\n    const [expandMode, setExpandMode] = useState(true);\r\n    const categoryDS = useSelector(s => s.data.dataCategory);\r\n    const isLoad = false;\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        console.log('render useeffect data')\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    console.log(tab,'render grid Category');\r\n    return (\r\n         <DataGrid\r\n                ref={vref}\r\n                id={'gridViewCty'}\r\n               // key={'evdno'}\r\n                dataSource= { categoryDS }\r\n              //  onContentReady={ (e) => gConfig.onContentReady(e, isLoad) }\r\n                columnAutoWidth={true}\r\n                height= {\"100%\"}\r\n                width= {\"100%\"}\r\n                //noDataText={isLoad ? '' : 'No Data !'}\r\n               // onToolbarPreparing={ (e) => gConfig.onToolbarPreparing(e, selectionMode, setSelectionMode, expandMode, setExpandMode) }\r\n                showBorders={false}\r\n                showColumnLines= {false}\r\n                showRowLines={true}\r\n                rowAlternationEnabled={true}\r\n               // onSelectionChanged= {  gConfig.changeStateSelectionChange  }  \r\n                allowColumnResizing={true}\r\n                // onInitNewRow= { gConfig.onInitNewRow() }\r\n                // onRowUpdated = { (e) => gConfig.onRowUpdated(e, 4)(dispatch) }\r\n                // onRowInserted = { (e) => { gConfig.onRowInserted(e, 4)(dispatch) } }\r\n                // onRowRemoved = { (e) => { gConfig.onRowRemoved(e, 4)(dispatch) }}\r\n            > \r\n            <Editing refreshMode={'reshape'} mode=\"popup\" allowAdding={true} allowUpdating={true} allowDeleting={true} >\r\n                <Popup title=\"Barang\" showTitle={true} width={700} height={600}>\r\n                    <Position my=\"top\" at=\"top\" of={window} />\r\n                </Popup>\r\n                <Form>\r\n                    <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                        <Item dataField=\"number\"  editorOptions={{ disabled: true  }} />\r\n                        <Item dataField=\"code\" />\r\n                        <Item dataField=\"name\" />\r\n                        <Item dataField=\"desc\" editorType=\"dxTextArea\" colSpan={2} editorOptions={{ height: 100 }} />\r\n                    </Item>  \r\n                </Form>\r\n            </Editing>\r\n\r\n            <Scrolling mode={\"virtual\"} />\r\n            <LoadPanel enabled={true}  showPane={true} />\r\n            <GroupPanel visible={true} />\r\n            <Grouping autoExpandAll={expandMode} />\r\n            <SearchPanel visible={true} highlightCaseSensitive={true} />\r\n            <Selection mode={selectionMode} selectAllMode={'allPages'} showCheckBoxesMode={'always'} allowSelectAll={true} />\r\n            <ColumnFixing enabled={true} />\r\n             {/* { gConfig.generateColumns(tab) } */}\r\n            <Column dataField=\"number\" caption=\"NO.\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"code\" caption=\"CODE\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"name\" caption=\"NAMA\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"desc\" caption=\"DESK\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            \r\n    </DataGrid>  \r\n    )\r\n}\r\nconst areEqual = (prevProps, nextProps) => true;\r\nexport default React.memo(GridCategory, areEqual)\r\n","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\GridQty.js",["214","215","216","217","218"],"import React, {useState, useEffect} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport DataGrid, {Column, Selection, Grouping, GroupPanel, ColumnFixing, SearchPanel, Scrolling, LoadPanel, Editing, Popup, Position, Form } from 'devextreme-react/data-grid';\r\nimport { Item } from 'devextreme-react/form';\r\nimport * as gConfig from './ConfigGrids';\r\n\r\n\r\nfunction GridQty({tab, vref}) {\r\n    const [selectionMode, setSelectionMode] = useState('multiple');\r\n    const [expandMode, setExpandMode] = useState(true);\r\n    const qtyDS = useSelector(s => s.data.dataQtytype);\r\n    const isLoad = false;\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        console.log('render useeffect data'\r\n        )// eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    console.log(tab,'render grid Qty');\r\n    return (\r\n         <DataGrid\r\n                ref={vref}\r\n                id={'gridViewQty'}\r\n               // key={'evdno'}\r\n                dataSource= { qtyDS }\r\n                //onContentReady={ (e) => gConfig.onContentReady(e, isLoad) }\r\n                columnAutoWidth={true}\r\n                height= {\"100%\"}\r\n                width= {\"100%\"}\r\n                //noDataText={isLoad ? '' : 'No Data !'}\r\n                //onToolbarPreparing={ (e) => gConfig.onToolbarPreparing(e, selectionMode, setSelectionMode, expandMode, setExpandMode) }\r\n                showBorders={false}\r\n                showColumnLines= {false}\r\n                showRowLines={true}\r\n                rowAlternationEnabled={true}\r\n                //onSelectionChanged= {  gConfig.changeStateSelectionChange  }  \r\n                allowColumnResizing={true}\r\n                // onInitNewRow= { gConfig.onInitNewRow() }\r\n                // onRowUpdated = { (e) => gConfig.onRowUpdated(e, 5)(dispatch) }\r\n                // onRowInserted = { (e) => { gConfig.onRowInserted(e, 5)(dispatch) } }\r\n                // onRowRemoved = { (e) => { gConfig.onRowRemoved(e, 5)(dispatch) }}\r\n            > \r\n              <Editing refreshMode={'reshape'} mode=\"popup\" allowAdding={true} allowUpdating={true} allowDeleting={true} >\r\n                <Popup title=\"Qty\" showTitle={true} width={700} height={600}>\r\n                    <Position my=\"top\" at=\"top\" of={window} />\r\n                </Popup>\r\n                <Form>\r\n                    <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                        <Item dataField=\"number\"  editorOptions={{ disabled: true  }} />\r\n                        <Item dataField=\"code\" />\r\n                        <Item dataField=\"name\" />\r\n                        <Item dataField=\"desc\" editorType=\"dxTextArea\" colSpan={2} editorOptions={{ height: 100 }} />\r\n                    </Item>  \r\n                </Form>\r\n            </Editing>\r\n\r\n            <Scrolling mode={\"virtual\"} />\r\n            <LoadPanel enabled={true}  showPane={true} />\r\n            <GroupPanel visible={true} />\r\n            <Grouping autoExpandAll={expandMode} />\r\n            <SearchPanel visible={true} highlightCaseSensitive={true} />\r\n            <Selection mode={selectionMode} selectAllMode={'allPages'} showCheckBoxesMode={'always'} allowSelectAll={true} />\r\n            <ColumnFixing enabled={true} />\r\n            {/* { gConfig.generateColumns(tab) } */}\r\n            <Column dataField=\"number\" caption=\"NO.\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"code\" caption=\"CODE\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"name\" caption=\"NAMA\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            <Column dataField=\"desc\" caption=\"DESK\" visible={true}  cssClass=\"row-vertical-align\" />\r\n            \r\n    </DataGrid>  \r\n    )\r\n}\r\nconst areEqual = (prevProps, nextProps) => true;\r\nexport default React.memo(GridQty, areEqual)\r\n","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\template\\Header.js",[],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\actions\\dataAction.js",["219"],"import { CHANGE_TAB, \r\n  OPEN_MODAL,\r\n  GET_PRODUCT,\r\n  GET_SUPPLIER,\r\n  GET_CUSTOMER,\r\n  GET_BRAND,\r\n  GET_CATEGORY,\r\n  GET_QTYTYPE,\r\n  GET_COLOR,\r\n  TOOGLE_LOADING\r\n} from \"../types/dataType\";\r\nimport { setDataTable } from '../actions/tableAction'\r\nimport axios from 'axios';\r\nimport config from '../../config';\r\n\r\nconst productsTable =  {\r\n    url : `${config.apiURL}product`, \r\n    urlDeleteAll : `${config.apiUrl}productDeleteAll`, \r\n    columns : [\r\n      { id: \"number\", dataField: \"number\", caption: \"No.\", width: 45, alignment: \"center\", dataType:\"number\" },\r\n      { id: \"name\", dataField: \"name\", caption: \"Nama\", alignment: \"center\",  },\r\n      { id: \"brand\", dataField: \"brand\", caption: \"Merk\", alignment: \"center\", custom:'lookup'  },\r\n      { id: \"bprice\", dataField: \"bprice\", caption: \"Beli\", alignment: \"center\",  dataType:\"number\", format:{type:\"fixedPoint\", precision:2} },\r\n      { id: \"sprice\", dataField: \"sprice\", caption: \"Jual\", alignment: \"center\",  dataType:\"number\", format:{type:\"fixedPoint\", precision:2} },\r\n      { id: \"stock\", dataField: \"stock\", caption: \"Stock\", alignment: \"center\",  },\r\n      { id: \"qtytype\", dataField: \"qtytype\", caption: \"Satuan\", alignment: \"center\",  custom:'lookup' },\r\n      { id: \"category\", dataField: \"category\", caption: \"Kategori\", alignment: \"center\", custom:'lookup' },\r\n      { id: \"color\", dataField: \"color\", caption: \"Warna\", alignment: \"center\" },\r\n      { id: \"supplier\", dataField: \"supplier\", caption: \"Pemasok\", alignment: \"center\", custom:'lookup' },\r\n      { id: \"image\", dataField: \"image\", caption: \"Gambar\", alignment: \"center\",  },\r\n      { id: \"desc\", dataField: \"desc\", caption: \"Ket.\", alignment: \"center\",  },\r\n    ]\r\n}\r\n\r\nconst suppliersTable =  {\r\n  url : `${config.apiURL}supplier`,\r\n  columns : [\r\n    { id: \"number\", dataField: \"number\", caption: \"No.\", width: 45, alignment: \"center\",  },\r\n    { id: \"name\", dataField: \"name\", caption: \"Nama\", alignment: \"center\",  },\r\n    { id: \"address\", dataField: \"address\", caption: \"Alamat\", alignment: \"center\",  },\r\n    { id: \"city\", dataField: \"city\", caption: \"Kota\", alignment: \"center\",  },\r\n    { id: \"province\", dataField: \"province\", caption: \"Provinsi\", alignment: \"center\",  },\r\n    { id: \"phone\", dataField: \"phone\", caption: \"Telp.\", alignment: \"center\",  },\r\n    { id: \"phone2\", dataField: \"phone2\", caption: \"Telp2\", alignment: \"center\",  },\r\n    { id: \"store\", dataField: \"store\", caption: \"Toko\", alignment: \"center\",  },\r\n    { id: \"photo\", dataField: \"photo\", caption: \"Foto\", alignment: \"center\",  },\r\n    { id: \"desc\", dataField: \"desc\", caption: \"Ket.\", alignment: \"center\",  },\r\n  ]\r\n}\r\n\r\nconst customersTable =  {\r\n  url : `${config.apiURL}customer`,\r\n  columns : [\r\n    { id: \"number\", dataField: \"number\", caption: \"No.\", width: 45, alignment: \"center\",  },\r\n    { id: \"name\", dataField: \"name\", caption: \"Nama\", alignment: \"center\",  },\r\n    { id: \"address\", dataField: \"address\", caption: \"Alamat\", alignment: \"center\",  },\r\n    { id: \"city\", dataField: \"city\", caption: \"Kota\", alignment: \"center\",  },\r\n    { id: \"province\", dataField: \"province\", caption: \"Provinsi\", alignment: \"center\",  },\r\n    { id: \"phone\", dataField: \"phone\", caption: \"Telp.\", alignment: \"center\",  },\r\n    { id: \"phone2\", dataField: \"phone2\", caption: \"Telp2\", alignment: \"center\",  },\r\n    { id: \"store\", dataField: \"store\", caption: \"Toko\", alignment: \"center\",  },\r\n    { id: \"photo\", dataField: \"photo\", caption: \"Foto\", alignment: \"center\",  },\r\n    { id: \"desc\", dataField: \"desc\", caption: \"Ket.\", alignment: \"center\",  },\r\n  ]\r\n}\r\n\r\nconst brandsTable =  {\r\n  url : `${config.apiURL}brand`,\r\n  columns : [\r\n    { id: \"number\", dataField: \"number\", caption: \"No.\", width: 45, alignment: \"center\",  },\r\n    { id: \"name\", dataField: \"name\", caption: \"Nama\", alignment: \"center\",  },\r\n    { id: \"desc\", dataField: \"desc\", caption: \"Ket.\", alignment: \"center\",  },\r\n  ]\r\n}\r\n\r\nconst categoriesTable =  {\r\n  url : `${config.apiURL}category`,\r\n  columns : [\r\n    { id: \"number\", dataField: \"number\", caption: \"No.\", width: 45, alignment: \"center\",  },\r\n    { id: \"code\", dataField: \"code\", caption: \"Kode\", alignment: \"center\",  },\r\n    { id: \"name\", dataField: \"name\", caption: \"Nama\", alignment: \"center\",  },\r\n    { id: \"desc\", dataField: \"desc\", caption: \"Ket.\", alignment: \"center\",  },\r\n  ]\r\n}\r\n\r\nconst qtytypesTable =  {\r\n  url : `${config.apiURL}qtytype`,\r\n  columns : [\r\n    { id: \"number\", dataField: \"number\", caption: \"No.\", width: 45, alignment: \"center\",  },\r\n    { id: \"code\", dataField: \"code\", caption: \"Kode\", alignment: \"center\",  },\r\n    { id: \"name\", dataField: \"name\", caption: \"Nama\", alignment: \"center\",  },\r\n    { id: \"desc\", dataField: \"desc\", caption: \"Ket.\", alignment: \"center\",  },\r\n  ]\r\n}\r\n\r\nconst colorTable =  {\r\n  url : `${config.apiURL}color`,\r\n  columns : [\r\n    { id: \"number\", dataField: \"number\", caption: \"No.\", width: 45, alignment: \"center\",  },\r\n    { id: \"name\", dataField: \"name\", caption: \"Nama\", alignment: \"center\",  },\r\n    { id: \"desc\", dataField: \"desc\", caption: \"Ket.\", alignment: \"center\",  },\r\n  ]\r\n}\r\n\r\n\r\nexport const changeTabIndex = tab => dispatch => {\r\n  dispatch({ type: CHANGE_TAB, payload: { tabActive: tab } });\r\n};\r\n\r\nexport const getColumnsGrid = tab  => {\r\n  let columns = [];\r\n  if(tab === 0) {  columns = [...productsTable.columns];   } \r\n  else if(tab === 1) { columns = [...suppliersTable.columns]; } \r\n  else if(tab === 2) { columns = [...customersTable.columns]; }\r\n  else if(tab === 3) { columns = [...brandsTable.columns]; }\r\n  else if(tab === 4) { columns = [...categoriesTable.columns]; }\r\n  else if(tab === 5) { columns = [...qtytypesTable.columns]; }\r\n  else if(tab === 6) { columns = [...colorTable.columns]; }\r\n  else { columns = [...productsTable.columns]; } \r\n  return columns;\r\n}\r\n\r\nconst generateNumber = (dataSource) => {\r\n  let number = 1;\r\n  dataSource.forEach(d => { d.number = number++; });  \r\n  return dataSource;\r\n}\r\n\r\nconst getAction = (index, res, columns) => {\r\n    if(index === 0)      { return { type: GET_PRODUCT, payload: { dataSource: generateNumber(res.data),  columns: columns, isLoading: false  } }; } \r\n    else if(index === 1) { return { type: GET_SUPPLIER, payload: { dataSource: generateNumber(res.data), columns: columns, isLoading: false  } }; } \r\n    else if(index === 2) { return { type: GET_CUSTOMER, payload: { dataSource: generateNumber(res.data), columns: columns, isLoading: false  } }; }\r\n    else if(index === 3) { return { type: GET_BRAND, payload: { dataSource: generateNumber(res.data),    columns: columns, isLoading: false  } }; }\r\n    else if(index === 4) { return { type: GET_CATEGORY, payload: { dataSource: generateNumber(res.data), columns: columns, isLoading: false  } }; }\r\n    else if(index === 5) { return { type: GET_QTYTYPE, payload: { dataSource: generateNumber(res.data),  columns: columns, isLoading: false  } }; }\r\n    else if(index === 6) { return { type: GET_COLOR, payload:  { dataSource: generateNumber(res.data),   columns: columns, isLoading: false  } }; }\r\n    else return {}\r\n}\r\n\r\n\r\nconst fileUploadHandler = async(file) =>{\r\n  let token = localStorage.getItem('jwt');\r\n  let formData = new FormData();\r\n  formData.append('image', file);\r\n\r\n  try {\r\n    const aConfig = { headers:{ 'Content-Type': 'multipart/form-data', Authorization: token } }\r\n    const {data} = await axios.post(`${config.apiURL}upload`, formData, aConfig);\r\n    return data;\r\n  } catch (error) {\r\n    console.log('error frontend',error);\r\n  }\r\n}\r\n\r\nexport const getData = (tab) => (dispatch, getState) => {\r\n    let columns = [];\r\n    let url = '';\r\n    let token = localStorage.getItem('jwt');\r\n    let header = {\r\n      headers: {\r\n          'Accept' : 'application/json',\r\n          'Content-Type':  'application/json',\r\n          Authorization: token\r\n        },\r\n     }\r\n     if(tab === 0) {      url = productsTable.url; columns = productsTable.columns;   } \r\n     else if(tab === 1) { url = suppliersTable.url; columns = suppliersTable.columns; } \r\n     else if(tab === 2) { url = customersTable.url; columns = customersTable.columns; }\r\n     else if(tab === 3) { url = brandsTable.url; columns = brandsTable.columns; }\r\n     else if(tab === 4) { url = categoriesTable.url; columns = categoriesTable.columns; }\r\n     else if(tab === 5) { url = qtytypesTable.url; columns = qtytypesTable.columns; }\r\n     else if(tab === 6) { url = colorTable.url; columns = colorTable.columns; }\r\n     else { url = productsTable.url; columns = productsTable.columns; }\r\n    \r\n   dispatch({type: TOOGLE_LOADING, payload: true})\r\n   return axios.get(url, header).then(res =>{\r\n        if(res.status === 200){\r\n          dispatch({type: TOOGLE_LOADING, payload: false})\r\n          dispatch(getAction(tab, res, columns));\r\n          return true;\r\n       //   .then(callback(generateNumber(res.data), columns))\r\n        }else{\r\n          console.log('error get data !');\r\n          return false;\r\n        }\r\n    })\r\n    .catch(err => {\r\n      console.log('error get data !');\r\n    });\r\n}\r\n\r\nexport const getProductSupport = async ()  => {\r\n  let token = localStorage.getItem('jwt');\r\n  let header = {\r\n    headers: {\r\n        'Accept' : 'application/json',\r\n        'Content-Type':  'application/json',\r\n      //  'Content-Type':  'application/vnd.api+json',\r\n        Authorization: token\r\n      },\r\n   }\r\n\r\n    try {\r\n      const brand =  await axios.get(`${config.apiURL}brand`, header);\r\n      const category = await axios.get(`${config.apiURL}category`, header);\r\n      const qtytype = await axios.get(`${config.apiURL}qtytpe`, header);\r\n      const supplier = await axios.get(`${config.apiURL}supplier`, header);\r\n\r\n      if(brand && category && qtytype && supplier)\r\n        return {brand, category, qtytype, supplier}\r\n      else\r\n        return false;\r\n    } catch (error) {\r\n      console.log('error get data !');\r\n    }\r\n}\r\n\r\nexport const storeData = (tab, data) => async dispatch => {\r\n  let url = '';\r\n  let token = localStorage.getItem('jwt');\r\n  let axiosConfig = { headers: { Authorization: token } };\r\n\r\n  if(tab === 0) {      url = productsTable.url;  } \r\n  else if(tab === 1) { url = suppliersTable.url; } \r\n  else if(tab === 2) { url = customersTable.url; }\r\n  else if(tab === 3) { url = brandsTable.url;    }\r\n  else if(tab === 4) { url = categoriesTable.url;}\r\n  else if(tab === 5) { url = qtytypesTable.url;  }\r\n  else if(tab === 6) { url = colorTable.url;     }\r\n  else {               url = productsTable.url;  }\r\n  const img = await fileUploadHandler(data.image);\r\n  if(img){\r\n    data.image = img;\r\n    axios.post(url, data, axiosConfig).then(res => {\r\n      if(res.status === 201){\r\n        console.log(res);\r\n        dispatch(getData(tab));\r\n      }else{\r\n        console.log('error store data !');\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.log('error store data !');\r\n    })\r\n  }\r\n}\r\n\r\nexport const updateData = (tab, data) => dispatch => {\r\n    let url = '';\r\n    let token = localStorage.getItem('jwt');\r\n    let axiosConfig = {\r\n      headers: {\r\n          'Accept' : 'application/json',\r\n          'Content-Type':  'application/vnd.api+json',\r\n          Authorization: token\r\n        },\r\n     }\r\n     if(tab === 0) {      url = productsTable.url;  } \r\n     else if(tab === 1) { url = suppliersTable.url; } \r\n     else if(tab === 2) { url = customersTable.url; }\r\n     else if(tab === 3) { url = brandsTable.url;    }\r\n     else if(tab === 4) { url = categoriesTable.url;}\r\n     else if(tab === 5) { url = qtytypesTable.url;  }\r\n     else if(tab === 6) { url = colorTable.url;     }\r\n     else {               url = productsTable.url;  }\r\n     return axios.put(`${url}/${data.id}`, data, axiosConfig).then(res =>{\r\n      if(res.status === 201){\r\n        return res.data;\r\n     //   .then(callback(generateNumber(res.data), columns))\r\n      }else{\r\n        console.log('error get data !');\r\n        return false;\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.log('error get data !');\r\n    });\r\n\r\n}\r\n\r\nexport const deleteData = (id, tab) => dispatch => {\r\n  let url = '';\r\n  let token = localStorage.getItem('jwt');\r\n  let axiosConfig = {\r\n    headers: {\r\n        'Accept' : 'application/json',\r\n        'Content-Type': 'application/json',\r\n        Authorization: token\r\n      },\r\n   }\r\n   if(tab === 0) {      url = productsTable.url;  } \r\n   else if(tab === 1) { url = suppliersTable.url; } \r\n   else if(tab === 2) { url = customersTable.url; }\r\n   else if(tab === 3) { url = brandsTable.url;    }\r\n   else if(tab === 4) { url = categoriesTable.url;}\r\n   else if(tab === 5) { url = qtytypesTable.url;  }\r\n   else if(tab === 6) { url = colorTable.url;     }\r\n   else {               url = productsTable.url;  }\r\n //  dispatch({type: TOOGLE_LOADING, payload: true})\r\n   const deleteOne = () => {\r\n    axios.delete(url+'/'+id[0], axiosConfig).then(res => {\r\n      if(res.status === 200){\r\n        console.log(res);\r\n      }else{\r\n        console.log('error delete data !');\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.log('error delete data !');\r\n    })\r\n   }\r\n\r\n   const deleteAll = () => {\r\n     debugger;\r\n    let cUrl = `${url}?deleteMany=1`;\r\n    let body = { data: { '_id': id } }\r\n    axiosConfig.data = body;\r\n    axios.delete(cUrl, axiosConfig).then(res => {\r\n      if(res.status === 200){\r\n        dispatch(getData(tab));\r\n      }else{\r\n        console.log('error delete data !');\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.log('error delete data !');\r\n    })\r\n   }\r\n   debugger;\r\n   if(id.length === 1) deleteOne()\r\n   else if(id.length > 1) deleteAll();\r\n}\r\n\r\n\r\nexport const handleOpenModal = (v) => dispatch => {\r\n  return dispatch({ type: OPEN_MODAL, payload: v})\r\n}\r\n\r\n\r\n  \r\n  ","C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\component\\data\\ConfigGrids.js",["220","221"],"C:\\Users\\programmer3\\Documents\\Vicky\\re\\latihan\\_github\\mern\\mern-api\\frontend\\src\\services\\actions\\tableAction.js",[],{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","severity":1,"message":"227","line":12,"column":1,"nodeType":"228","endLine":46,"endColumn":2},{"ruleId":"226","severity":1,"message":"227","line":24,"column":1,"nodeType":"228","endLine":149,"endColumn":4},{"ruleId":"226","severity":1,"message":"227","line":35,"column":3,"nodeType":"228","endLine":141,"endColumn":4},{"ruleId":"226","severity":1,"message":"229","line":13,"column":1,"nodeType":"228","endLine":57,"endColumn":3},{"ruleId":"230","severity":1,"message":"231","line":46,"column":9,"nodeType":"232","messageId":"233","endLine":46,"endColumn":32},{"ruleId":"230","severity":1,"message":"234","line":3,"column":8,"nodeType":"232","messageId":"233","endLine":3,"endColumn":19},{"ruleId":"230","severity":1,"message":"235","line":38,"column":11,"nodeType":"232","messageId":"233","endLine":38,"endColumn":24},{"ruleId":"230","severity":1,"message":"236","line":1,"column":26,"nodeType":"232","messageId":"233","endLine":1,"endColumn":32},{"ruleId":"230","severity":1,"message":"237","line":11,"column":27,"nodeType":"232","messageId":"233","endLine":11,"endColumn":43},{"ruleId":"230","severity":1,"message":"238","line":12,"column":24,"nodeType":"232","messageId":"233","endLine":12,"endColumn":37},{"ruleId":"230","severity":1,"message":"239","line":15,"column":11,"nodeType":"232","messageId":"233","endLine":15,"endColumn":19},{"ruleId":"230","severity":1,"message":"240","line":3,"column":98,"nodeType":"232","messageId":"233","endLine":3,"endColumn":107},{"ruleId":"230","severity":1,"message":"241","line":3,"column":109,"nodeType":"232","messageId":"233","endLine":3,"endColumn":118},{"ruleId":"230","severity":1,"message":"242","line":3,"column":129,"nodeType":"232","messageId":"233","endLine":3,"endColumn":134},{"ruleId":"230","severity":1,"message":"243","line":3,"column":136,"nodeType":"232","messageId":"233","endLine":3,"endColumn":144},{"ruleId":"230","severity":1,"message":"244","line":7,"column":8,"nodeType":"232","messageId":"233","endLine":7,"endColumn":15},{"ruleId":"230","severity":1,"message":"245","line":18,"column":11,"nodeType":"232","messageId":"233","endLine":18,"endColumn":17},{"ruleId":"230","severity":1,"message":"246","line":36,"column":11,"nodeType":"232","messageId":"233","endLine":36,"endColumn":25},{"ruleId":"230","severity":1,"message":"236","line":1,"column":26,"nodeType":"232","messageId":"233","endLine":1,"endColumn":32},{"ruleId":"230","severity":1,"message":"247","line":7,"column":13,"nodeType":"232","messageId":"233","endLine":7,"endColumn":20},{"ruleId":"230","severity":1,"message":"237","line":11,"column":27,"nodeType":"232","messageId":"233","endLine":11,"endColumn":43},{"ruleId":"230","severity":1,"message":"238","line":12,"column":24,"nodeType":"232","messageId":"233","endLine":12,"endColumn":37},{"ruleId":"230","severity":1,"message":"245","line":14,"column":11,"nodeType":"232","messageId":"233","endLine":14,"endColumn":17},{"ruleId":"230","severity":1,"message":"239","line":15,"column":11,"nodeType":"232","messageId":"233","endLine":15,"endColumn":19},{"ruleId":"230","severity":1,"message":"236","line":1,"column":26,"nodeType":"232","messageId":"233","endLine":1,"endColumn":32},{"ruleId":"230","severity":1,"message":"245","line":13,"column":11,"nodeType":"232","messageId":"233","endLine":13,"endColumn":17},{"ruleId":"230","severity":1,"message":"239","line":14,"column":11,"nodeType":"232","messageId":"233","endLine":14,"endColumn":19},{"ruleId":"230","severity":1,"message":"247","line":6,"column":13,"nodeType":"232","messageId":"233","endLine":6,"endColumn":20},{"ruleId":"230","severity":1,"message":"237","line":9,"column":27,"nodeType":"232","messageId":"233","endLine":9,"endColumn":43},{"ruleId":"230","severity":1,"message":"238","line":10,"column":24,"nodeType":"232","messageId":"233","endLine":10,"endColumn":37},{"ruleId":"230","severity":1,"message":"245","line":12,"column":11,"nodeType":"232","messageId":"233","endLine":12,"endColumn":17},{"ruleId":"230","severity":1,"message":"239","line":13,"column":11,"nodeType":"232","messageId":"233","endLine":13,"endColumn":19},{"ruleId":"230","severity":1,"message":"247","line":5,"column":13,"nodeType":"232","messageId":"233","endLine":5,"endColumn":20},{"ruleId":"230","severity":1,"message":"237","line":9,"column":27,"nodeType":"232","messageId":"233","endLine":9,"endColumn":43},{"ruleId":"230","severity":1,"message":"238","line":10,"column":24,"nodeType":"232","messageId":"233","endLine":10,"endColumn":37},{"ruleId":"230","severity":1,"message":"245","line":12,"column":11,"nodeType":"232","messageId":"233","endLine":12,"endColumn":17},{"ruleId":"230","severity":1,"message":"239","line":13,"column":11,"nodeType":"232","messageId":"233","endLine":13,"endColumn":19},{"ruleId":"230","severity":1,"message":"248","line":12,"column":10,"nodeType":"232","messageId":"233","endLine":12,"endColumn":22},{"ruleId":"230","severity":1,"message":"249","line":2,"column":18,"nodeType":"232","messageId":"233","endLine":2,"endColumn":24},{"ruleId":"230","severity":1,"message":"250","line":89,"column":21,"nodeType":"232","messageId":"233","endLine":89,"endColumn":23},"no-native-reassign",["251"],"no-negated-in-lhs",["252"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","no-unused-vars","'handleClickShowPassword' is assigned a value but never used.","Identifier","unusedVar","'ToolsAction' is defined but never used.","'onActionClick' is assigned a value but never used.","'useRef' is defined but never used.","'setSelectionMode' is assigned a value but never used.","'setExpandMode' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'Scrolling' is defined but never used.","'LoadPanel' is defined but never used.","'Popup' is defined but never used.","'Position' is defined but never used.","'isEmpty' is defined but never used.","'isLoad' is assigned a value but never used.","'onEditingStart' is assigned a value but never used.","'gConfig' is defined but never used.","'setDataTable' is defined but never used.","'Lookup' is defined but never used.","'cc' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]